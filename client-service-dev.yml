server:
  port: ${CUSTOM.SERVER.PORT:9010}

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    metrics:
      enabled: true
      legacy:
        enabled: true
    configs:
      product-service-circuit-breaker:
        registerHealthIndicator: true
        allowHealthIndicatorToFail: true  
        slidingWindowType: count_based
        minimumNumberOfCalls: 13
        slidingWindowSize: 13
        failureRateThreshold: 50
        waitDurationInOpenState: 30s
        permittedNumberOfCallsInHalfOpenState: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        slowCallDurationThreshold: 2000ms
        slowCallRateThreshold: 20
        eventConsumerBufferSize: 10
        # recordExceptions:
        #     - org.springframework.web.client.HttpServerErrorException
        #     - java.util.concurrent.TimeoutException
        #     - java.io.IOException
    instances:
      mitocode-product:
        base-config: product-service-circuit-breaker
  timelimiter:
    configs:
      product-service-time-limiter:
        timeoutDuration: 1s
    instances:
      mitocode-product-tl:
        base-config: product-service-time-limiter

  retry:
    configs:
      retry-product:
        maxAttempts: 5
        waitDuration: 200
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
    instances:
      retry-product:
        baseConfig: retry-product

mitocode:
  circuit-breaker:
    common:
        slidingWindowSize: 20
        failureRateThreshold: 35
        waitDurationInOpenState: 15000
        permittedNumberOfCallsInHalfOpenState: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        slowCallDurationThreshold: 2000
        slowCallRateThreshold: 80     

# OpenTelemetry Configuration

management:
  otlp:
    tracing:
      endpoint: http://localhost:4318/v1/traces
      timeout: 10s
    metrics:
      exportes:
        url: http://localhost:4318/v1/metrics
        step: 5s
  opentelemetry:
    resourceAttributes."client-service": ${spring.application.name}

